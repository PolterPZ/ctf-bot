import { IBotContext } from "../context/context.interface";
import { Markup, Scenes } from "telegraf";
import {
  educationInlineButton,
  courseInlineButton,
  contactInlineButton,
  workingInlineButton,
  requestDataInlineButton,
  whereInlineButton,
  educationOption,
} from "../markups/registration.markups";
import { UserModel } from "../database/Schema.class";
import {
  courseOption,
  whereOption,
  workingOption,
  requestOption,
} from "../markups/registration.markups";
import { isContactMessage } from "../utils/generaly-utils.functions";
import { generatePDF } from "../utils/generate-pdf";
import path from "path";
import { rulesText } from "../sharedText";

function isTextMessage(message: any): message is { text: string } {
  return message && message.text !== undefined;
}
async function handleStart(ctx: any): Promise<boolean> {
  if (ctx.message && ctx.message.text === "/start") {
    await ctx.reply(
      "üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ü–µ–Ω–∏..."
    );
    await ctx.scene.leave(); // Exit the current wizard scene
    await ctx.scene.enter("before-registration"); // Switch to the 'before-registration-scene'
    return true; // Indicate that the '/start' command was handled
  }
  return false; // Command was not handled
}

const registrationWizard = new Scenes.WizardScene<IBotContext>(
  "registration-wizard",

  // Step 1
  async (ctx) => {
    try {
      ctx.session.subInfo = ctx.session.subInfo || {};

      await ctx.replyWithPhoto(
        { source: path.join(__dirname, "../../public/registration.jpg") },
        {
          caption:
            "üéâ –í—ñ—Ç–∞—é! –í–∏ –ø–æ—á–∞–ª–∏ –µ—Ç–∞–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó! –ü—Ä–æ–π—à–æ–≤—à–∏ —ó—ó, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é –ø–æ—Ç—É–∂–Ω—É –∫–æ–º–∞–Ω–¥—É —Ç–∞ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.",
        }
      );
      await ctx.reply("üßë‚Äçüíº –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:", Markup.removeKeyboard());
      return ctx.wizard.next();
    } catch (error) {
      return;
    }
  },

  // Step 2
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isTextMessage(ctx.message)) {
        const age = parseInt(ctx.message.text);
        if (
          age.toString() !== ctx.message.text ||
          isNaN(age) ||
          age < 16 ||
          age > 100
        ) {
          await ctx.reply(
            "üî¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (–≤—ñ–¥ 16 –¥–æ 100)."
          );
          return;
        }

        await ctx.reply("–ü–æ–≤–∞–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞ üòé");
        await ctx.reply("üéì –î–µ –≤—á–∏—à—Å—è?", educationInlineButton);
        return ctx.wizard.next();
      } else {
        await ctx.reply("üî¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∫—É.");
      }
    } catch (error) {
      return;
    }
  },

  // Step 3
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isTextMessage(ctx.message)) {
        const education = ctx.message.text.trim();
        if (!education) {
          await ctx.reply("üè´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è.");
          ctx.wizard.selectStep(ctx.wizard.cursor);
          return;
        }
        if (educationOption[4] === education) {
          await ctx.reply(
            "üö´ –ù–∞ –∂–∞–ª—å, –≤ –Ω–∞—à–æ–º—É —ñ–≤–µ–Ω—Ç—ñ —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –±—Ä–∞—Ç–∏ –ª–∏—à–µ —Å—Ç—É–¥–µ–Ω—Ç–∏.",
            educationInlineButton
          );
          ctx.wizard.selectStep(ctx.wizard.cursor);
          return;
        }
        if (educationOption[5] === education) {
          await ctx.reply("‚úèÔ∏è –¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ, –¥–µ —Ç–∏ –≤—á–∏—à—Å—è.");
          return;
        }
        ctx.session.subInfo.education = education;
        await ctx.reply(
          "üßë‚Äçüíº –ù–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–≤—á–∞—î—à—Å—è?",
          Markup.removeKeyboard()
        );
        return ctx.wizard.next();
      } else {
        await ctx.reply("üè´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è.");
      }
    } catch (error) {
      return;
    }
  },

  // Step 4
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isTextMessage(ctx.message)) {
        const specialization = ctx.message.text.trim();
        if (!specialization) {
          await ctx.reply("üéì –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å.");
          return;
        }
        ctx.session.subInfo.specialization = specialization;
        await ctx.reply("ü§© –ö—Ä—É—Ç–∏–π –≤–∏–±—ñ—Ä!");
        await ctx.reply("üìö –ê –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ –∑–∞—Ä–∞–∑?", courseInlineButton);
        return ctx.wizard.next();
      } else {
        await ctx.reply("üéì –ù–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–≤—á–∞—î—à—Å—è?");
      }
    } catch (error) {
      return;
    }
  },

  // Step 5
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isTextMessage(ctx.message)) {
        const text = ctx.message.text.trim();
        if (text) {
          if (courseOption[5] === text) {
            await ctx.reply("üìÖ –¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ —Ç–∏ –∑–∞—Ä–∞–∑.");
            return;
          }

          ctx.session.subInfo.course = text;
          await ctx.reply(
            "üåü –ó–≤—ñ–¥–∫–∏ –¥—ñ–∑–Ω–∞–≤—Å—è/–ª–∞—Å—å –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è?",
            whereInlineButton
          );
          return ctx.wizard.next();
        } else {
          await ctx.reply("üìÖ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫—É—Ä—Å.");
        }
      } else {
        await ctx.reply("üìÖ –í–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.");
      }
    } catch (error) {
      return;
    }
  },

  // Step 6
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isTextMessage(ctx.message)) {
        const text = ctx.message.text.trim();
        if (text) {
          if (whereOption[3] === text) {
            await ctx.reply(
              "üïµÔ∏è‚Äç‚ôÇÔ∏è –¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ –¥–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è/–ª–∞—Å—å –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è."
            );
            return;
          }

          ctx.session.subInfo.where = text;
          await ctx.reply("üôè –î—è–∫—É—é, —â–æ –ø–æ–¥—ñ–ª–∏–≤—Å—è/–ª–∞—Å—å!");
          await ctx.reply(
            "üìû –¢–µ–ø–µ—Ä –¥–∞–≤–∞–π –æ–±–º—ñ–Ω—è—î–º–æ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
            contactInlineButton
          );
          return ctx.wizard.next();
        } else {
          await ctx.reply("üïµÔ∏è‚Äç‚ôÇÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.");
        }
      } else {
        await ctx.reply("üïµÔ∏è‚Äç‚ôÇÔ∏è –í–≤–µ–¥—ñ—Ç—å –∑–≤—ñ–¥–∫–∏ –¥—ñ–∑–Ω–∞–ª–∏—Å—è –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è.");
      }
    } catch (error) {
      return;
    }
  },

  // Step 7
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (isContactMessage(ctx.message)) {
        const contact = ctx.message.contact;

        ctx.session.subInfo.phone = contact.phone_number || "";
        await ctx.reply("‚òéÔ∏è –î—è–∫—É—é –∑–∞ —Ç–∞–∫–µ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!");
        await ctx.reply(
          "üîí –ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö",
          requestDataInlineButton
        );
        return ctx.wizard.next();
      } else {
        await ctx.reply("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ.");
      }
    } catch (error) {
      return;
    }
  },

  // Step 8
  async (ctx) => {
    try {
      if (await handleStart(ctx)) return; // Early return if '/start' was handled

      if (
        isTextMessage(ctx.message) &&
        requestOption.includes(ctx.message.text)
      ) {
        ctx.session.isRegistered = true;
        const user = await UserModel.findOne({ chatId: ctx.chat?.id });
        if (user) {
          Object.assign(user, { ...ctx.session });
          await user.save();
        } else {
          const user = new UserModel({ ...ctx.session });
          await user.save();
        }

        await ctx.replyWithPhoto(
          { source: path.join(__dirname, "../../public/start.jpg") },
          {
            caption: `
–í—ñ—Ç–∞—é —ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó! üéâ
<b>–¢–µ–ø–µ—Ä —Ç–∏ –∑–º–æ–∂–µ—à:</b>
      - –ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É
      - –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É
      - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
      - –ó–∞–π—Ç–∏ –≤ —á–∞—Ç, –¥–µ –±—É–¥—É—Ç—å –≤—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏
      - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è
      <u><b>–¢–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ!</b></u>`,
            parse_mode: "HTML",
          }
        );

        await ctx.scene.enter("after-registration-menu-wizard");
      } else {
        await ctx.reply(
          "‚úÖ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        );
      }
    } catch (error) {
      return;
    }
  }
);

export default registrationWizard;
